import { Directive, ElementRef, EventEmitter, Inject, Input, NgZone, Output, PLATFORM_ID } from '@angular/core';
import { never, ReplaySubject } from 'rxjs';
import { switchMap, take, tap } from 'rxjs/operators';
import { lazyLoadImage } from './lazyload-image';
import { LAZYLOAD_IMAGE_HOOKS } from './token';
import { Hooks } from './types';
export class LazyLoadImageDirective {
    constructor(el, ngZone, platformId, hooks) {
        this.onStateChange = new EventEmitter(); // Emits an event on every state change
        this.elementRef = el;
        this.ngZone = ngZone;
        this.propertyChanges$ = new ReplaySubject();
        this.hooks = hooks;
        this.hooks.setPlatformId(platformId);
        this.uid = Math.random().toString(36).substr(2, 9);
    }
    ngOnChanges() {
        if (this.debug === true && !this.debugSubscription) {
            this.debugSubscription = this.onStateChange.subscribe((e) => console.log(e));
        }
        this.propertyChanges$.next({
            element: this.elementRef.nativeElement,
            imagePath: this.lazyImage,
            defaultImagePath: this.defaultImage,
            errorImagePath: this.errorImage,
            useSrcset: this.useSrcset,
            cssBackgroundPrefix: this.cssBackgroundPrefix,
            offset: this.offset ? this.offset | 0 : 0,
            scrollContainer: this.scrollTarget,
            customObservable: this.customObservable,
            decode: this.decode,
            onStateChange: this.onStateChange,
            id: this.uid,
        });
    }
    ngAfterContentInit() {
        if (this.hooks.isDisabled()) {
            return null;
        }
        this.ngZone.runOutsideAngular(() => {
            this.loadSubscription = this.propertyChanges$
                .pipe(tap((attributes) => this.hooks.onAttributeChange(attributes)), tap((attributes) => attributes.onStateChange.emit({ reason: 'setup' })), tap((attributes) => this.hooks.setup(attributes)), switchMap((attributes) => {
                if (!attributes.imagePath) {
                    return never();
                }
                return this.hooks.getObservable(attributes).pipe(lazyLoadImage(this.hooks, attributes));
            }))
                .subscribe({
                next: () => null,
            });
        });
    }
    ngOnDestroy() {
        var _a, _b;
        this.propertyChanges$
            .pipe(take(1))
            .subscribe({ next: (attributes) => this.hooks.onDestroy(attributes) })
            .unsubscribe();
        (_a = this.loadSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        (_b = this.debugSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();
    }
}
LazyLoadImageDirective.decorators = [
    { type: Directive, args: [{
                selector: '[lazyLoad]',
            },] }
];
LazyLoadImageDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: Hooks, decorators: [{ type: Inject, args: [LAZYLOAD_IMAGE_HOOKS,] }] }
];
LazyLoadImageDirective.propDecorators = {
    lazyImage: [{ type: Input, args: ['lazyLoad',] }],
    defaultImage: [{ type: Input }],
    errorImage: [{ type: Input }],
    scrollTarget: [{ type: Input }],
    customObservable: [{ type: Input }],
    offset: [{ type: Input }],
    useSrcset: [{ type: Input }],
    cssBackgroundPrefix: [{ type: Input }],
    decode: [{ type: Input }],
    debug: [{ type: Input }],
    onStateChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,